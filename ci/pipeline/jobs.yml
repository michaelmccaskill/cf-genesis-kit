jobs:
- name: spec-tests
  public: true
  serial: true
  serial_groups: [genesis-ci]
  plan:
  - do:
    - in_parallel:
      - { get: git, trigger: true }
      - { get: git-ci }
    - task: spec-testing
      file: git-ci/ci/tasks/spec-tests/task.yml
      attempts: 2
    on_success:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: tests job '$BUILD_JOB_NAME' succeeded.
        ok:      yes
        link:    (( grab meta.shout.links.build ))
    on_failure:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: tests job '$BUILD_JOB_NAME' failed.
        ok:      no
        link:    (( grab meta.shout.links.build ))

- name: spec-check
  public: true
  serial: true
  serial_groups: [genesis-ci]
  plan:
  - do:
    - in_parallel:
      - { get: git, trigger: true }
      - { get: git-ci }
      - { get: git-latest-tag }
    - task: spec-testing
      file: git-ci/ci/tasks/spec-check/task.yml
    on_success:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: tests job '$BUILD_JOB_NAME' succeeded.
        ok:      yes
        link:    (( grab meta.shout.links.build ))
    on_failure:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: tests job '$BUILD_JOB_NAME' failed.
        ok:      no
        link:    (( grab meta.shout.links.build ))

- name: testflight
  public: true
  serial: true
  serial_groups: [genesis-ci]
  plan:
  - do:
    - in_parallel:
      - { get: git, trigger: true,  passed: [spec-tests] }
      - { get: git-ci }
      - { get: cats }
    - task: testflights
      file: git-ci/ci/tasks/test-flight/task.yml
      params:
        GENESIS_HONOR_ENV: "1"
        GIT_NAME:             (( grab meta.git.name ))
        GIT_EMAIL:            (( grab meta.git.email ))
        VAULT_URI:            (( grab meta.vault.url ))
        VAULT_TOKEN:          (( grab meta.vault.token ))
        KIT_SHORTNAME:        (( grab meta.kit ))
        BOSH_ENVIRONMENT:     (( grab meta.bosh.uri ))
        BOSH_CA_CERT:         (( grab meta.bosh.cacert ))
        BOSH_CLIENT:          (( grab meta.bosh.username ))
        BOSH_CLIENT_SECRET:   (( grab meta.bosh.password ))
        CREDHUB_URL:          (( grab meta.credhub.url))
        CREDHUB_USER:         (( grab meta.credhub.username))
        CREDHUB_PASSWORD:     (( grab meta.credhub.password))
        SKIP_FRESH:           false
        SKIP_CLEAN:           false
        SKIP_SMOKE_TESTS:     false
    on_success:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: tests job '$BUILD_JOB_NAME' succeeded.
        ok:      yes
        link:    (( grab meta.shout.links.build ))
    on_failure:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: tests job '$BUILD_JOB_NAME' failed.
        ok:      no
        link:    (( grab meta.shout.links.build ))

- name: cats-tests
  public: true
  serial: true
  serial_groups: [genesis-ci]
  plan:
  - do:
    - in_parallel:
      - { get: git, trigger: true,  passed: [spec-tests] }
      - { get: git-ci }
      - { get: cats }
    - task: testflights
      file: git-ci/ci/tasks/test-flight/task.yml
      params:
        GENESIS_HONOR_ENV:    "1"
        GIT_NAME:             (( grab meta.git.name ))
        GIT_EMAIL:            (( grab meta.git.email ))
        VAULT_URI:            (( grab meta.vault.url ))
        VAULT_TOKEN:          (( grab meta.vault.token ))
        KIT_SHORTNAME:        (( grab meta.kit ))
        BOSH_ENVIRONMENT:     (( grab meta.bosh.uri ))
        BOSH_CA_CERT:         (( grab meta.bosh.cacert ))
        BOSH_CLIENT:          (( grab meta.bosh.username ))
        BOSH_CLIENT_SECRET:   (( grab meta.bosh.password ))
        CREDHUB_URL:          (( grab meta.credhub.url))
        CREDHUB_USER:         (( grab meta.credhub.username))
        CREDHUB_PASSWORD:     (( grab meta.credhub.password))
        DEPLOYMENT_NAME:      ci-baseline-cats
        SKIP_FRESH:           true
        SKIP_CLEAN:           true
        SKIP_SMOKE_TESTS:     true
  - do:
    - in_parallel:
        fail_fast: true
        limit: 1
        steps:
        - task: cats-apps
          file: git-ci/ci/tasks/cats/task.yml
          attempts: 5
          params:
            .: (( inject meta.jobs.cats.params ))
            RUN_CATS: include_apps
        # - task: cats-detect
        #   file: git-ci/ci/tasks/cats/task.yml
        #   attempts: 5
        #   params:
        #     .: (( inject meta.jobs.cats.params ))
        #     RUN_CATS: include_detect
        # - task: cats-routing
        #   file: git-ci/ci/tasks/cats/task.yml
        #   attempts: 5
        #   params:
        #     .: (( inject meta.jobs.cats.params ))
        #     RUN_CATS: include_routing
        # - task: cats-backend-compability
        #   file: git-ci/ci/tasks/cats/task.yml
        #   attempts: 5
        #   params:
        #     .: (( inject meta.jobs.cats.params ))
        #     RUN_CATS: include_backend_compatibility
        # - task: cats-internet-dependent
        #   file: git-ci/ci/tasks/cats/task.yml
        #   attempts: 5
        #   params:
        #     .: (( inject meta.jobs.cats.params ))
        #     RUN_CATS: include_internet_dependent
        # - task: cats-route-services
        #   file: git-ci/ci/tasks/cats/task.yml
        #   attempts: 5
        #   params:
        #     .: (( inject meta.jobs.cats.params ))
        #     RUN_CATS: include_route_services
        # - task: cats-sec-grps
        #   file: git-ci/ci/tasks/cats/task.yml
        #   attempts: 5
        #   params:
        #     .: (( inject meta.jobs.cats.params ))
        #     RUN_CATS: include_security_groups
        # - task: cats-services
        #   file: git-ci/ci/tasks/cats/task.yml
        #   attempts: 5
        #   params:
        #     .: (( inject meta.jobs.cats.params ))
        #     RUN_CATS: include_services
        # - task: cats-ssh
        #   file: git-ci/ci/tasks/cats/task.yml
        #   attempts: 5
        #   params:
        #     .: (( inject meta.jobs.cats.params ))
        #     RUN_CATS: include_ssh
        # - task: cats-sso
        #   file: git-ci/ci/tasks/cats/task.yml
        #   attempts: 5
        #   params:
        #     .: (( inject meta.jobs.cats.params ))
        #     RUN_CATS: include_sso
        # - task: cats-tasks
        #   file: git-ci/ci/tasks/cats/task.yml
        #   attempts: 5
        #   params:
        #     .: (( inject meta.jobs.cats.params ))
        #     RUN_CATS: include_tasks
        # - task: cats-v3
        #   file: git-ci/ci/tasks/cats/task.yml
        #   attempts: 5
        #   params:
        #     .: (( inject meta.jobs.cats.params ))
        #     RUN_CATS: include_v3
        # - task: cats-deployments
        #   file: git-ci/ci/tasks/cats/task.yml
        #   attempts: 5
        #   params:
        #     .: (( inject meta.jobs.cats.params ))
        #     RUN_CATS: include_deployments
        # - task: cats-service_discovery
        #   file: git-ci/ci/tasks/cats/task.yml
        #   attempts: 5
        #   params:
        #     .: (( inject meta.jobs.cats.params ))
        #     RUN_CATS: include_service_discovery
        # - task: cats-capi_no_bridge
        #   file: git-ci/ci/tasks/cats/task.yml
        #   attempts: 5
        #   params:
        #     .: (( inject meta.jobs.cats.params ))
        #     RUN_CATS: include_capi_no_bridge
    - task: cleanup-enviorment
      file: git-ci/ci/tasks/test-flight/task.yml
      params:
        GENESIS_HONOR_ENV: "1"
        GIT_NAME:             (( grab meta.git.name ))
        GIT_EMAIL:            (( grab meta.git.email ))
        VAULT_URI:            (( grab meta.vault.url ))
        VAULT_TOKEN:          (( grab meta.vault.token ))
        KIT_SHORTNAME:        (( grab meta.kit ))
        BOSH_ENVIRONMENT:     (( grab meta.bosh.uri ))
        BOSH_CA_CERT:         (( grab meta.bosh.cacert ))
        BOSH_CLIENT:          (( grab meta.bosh.username ))
        BOSH_CLIENT_SECRET:   (( grab meta.bosh.password ))
        CREDHUB_URL:          (( grab meta.credhub.url))
        CREDHUB_USER:         (( grab meta.credhub.username))
        CREDHUB_PASSWORD:     (( grab meta.credhub.password))
        DEPLOYMENT_NAME:      ci-baseline-cats
        SKIP_FRESH:           true
        SKIP_DEPLOY:          true
        SKIP_SMOKE_TESTS:     true
        SKIP_CLEAN:           false



- name: pre
  public: true
  serial: true
  plan:
  - do:
    - in_parallel:
      - { get: git,     trigger: true,  passed: [testflight] }
      - { get: version, trigger: true }
      - { get: git-ci }
      - { get: git-latest-tag }
    - task: generate-release-notes
      file: git-ci/ci/tasks/generate-release-notes/task.yml
    on_success:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: release candidate job 'pre' succeeded.
        ok:      yes
        link:    (( grab meta.shout.links.build ))
    on_failure:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: release candidate job 'pre' failed (which is unusual).
        ok:      no
        link:    (( grab meta.shout.links.build ))

- name: rc
  public: true
  serial: true
  plan:
  - do:
    - in_parallel:
      - { get: git,     trigger: true,  passed: [pre] }
      - { get: version, trigger: false, passed: [pre], params: {pre: rc} }
    - put: version
      params: {file: version/number}
    on_success:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: release candidate job 'rc' succeeded.
        ok:      yes
        link:    (( grab meta.shout.links.build ))
    on_failure:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: release candidate job 'rc' failed (which is unusual).
        ok:      no
        link:    (( grab meta.shout.links.build ))

- name: minor
  public: true
  plan:
  - do:
    - { get: version, trigger: false, params: {bump: minor} }
    - { put: version,                 params: {file: version/number} }
    on_success:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: minor version bump job 'minor' succeeded.
        ok:      yes
        link:    (( grab meta.shout.links.build ))
    on_failure:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: minor version bump job 'minor' failed (which is unusual).
        ok:      no
        link:    (( grab meta.shout.links.build ))

- name: major
  public: true
  plan:
  - do:
    - { get: version, trigger: false, params: {bump: major} }
    - { put: version,                 params: {file: version/number} }
    on_success:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: major version bump job '$BUILD_JOB_NAME' succeeded.
        ok:      no
        link:    (( grab meta.shout.links.build ))
    on_failure:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: major version bump job '$BUILD_JOB_NAME' failed (which is unusual).
        ok:      no
        link:    (( grab meta.shout.links.build ))

- name: shipit
  public: true
  serial: true
  plan:
  - do:
    - in_parallel:
      - { get: version, resource: version, passed: [rc], params: {bump: final} }
      - { get: git,     passed: [rc] }
      - { get: git-ci }
      - { get: git-main }
      - { get: git-latest-tag }
    - task: generate-release-notes
      file: git-ci/ci/tasks/generate-release-notes/task.yml
    - task: release
      file: git-ci/ci/tasks/shipit/task.yml
      params:
        REPO_ROOT:    git
        VERSION_FROM: version/number
        RELEASE_ROOT: gh
        NOTIFICATION_OUT: notifications
        GITHUB_OWNER:  (( grab meta.github.owner ))
        GIT_EMAIL:     (( grab meta.git.email ))
        GIT_NAME:      (( grab meta.git.name ))
        KIT_SHORTNAME: (( grab meta.kit ))
    - put: git
      params:
        merge: true
        repository: git
    - put: git-main
      params:
        merge: true
        tag: gh/tag
        repository: git-main
    - put: github
      params:
        name:   gh/name
        tag:    gh/tag
        body:   release-notes/notes.md
        globs: [gh/artifacts/*]
    - put: version
      params:
        bump: patch
    - in_parallel:
        steps:
          - put: notify
            params:
              method: announce
              file: notifications/message
              link: (( concat meta.github.uri "/releases" ))
    on_success:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: release job '$BUILD_JOB_NAME' succeeded.
        ok:      yes
        link:    (( grab meta.shout.links.build ))
    on_failure:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: release job '$BUILD_JOB_NAME' failed.
        ok:      no
        link:    (( grab meta.shout.links.build ))